"medium": [
      { "question": "Proper way to parse options with getopts?", "options": ["while getopts \"a:b:c\" opt; do case $opt in a) value=$OPTARG;; esac; done", "getopts -parse \"a:b:c\" $@", "for opt in getopts \"a:b:c\"", "parse_options getopts"], "correct": 0, "tip": "getopts with while loop and case statement is standard approach." },
      { "question": "Advanced parameter expansion features?", "options": ["${variable##pattern} removes longest match from beginning", "${variable//pattern/replacement} replaces all matches", "${variable%%pattern} removes longest match from end", "All of the above"], "correct": 3, "tip": "Parameter expansion provides powerful pattern matching capabilities." },
      { "question": "Difference between $* and $@ in quoted form?", "options": ["\"$*\" creates single word, \"$@\" preserves separate arguments", "\"$@\" creates single word, \"$*\" preserves arguments", "They behave identically", "\"$*\" is for arrays"], "correct": 0, "tip": "When quoted, \"$*\" becomes one word, \"$@\" maintains individual arguments." },
      { "question": "How to create here documents?", "options": ["command <<EOF\\nlines\\nEOF", "command <<< \"single line\"", "command < input_file", "command | echo \"input\""], "correct": 0, "tip": "Here documents use <<DELIMITER syntax for multi-line input." },
      { "question": "What does 'set -u' do?", "options": ["Treats undefined variables as errors", "Sets variables as undefined", "Enables strict user mode", "Updates all variables"], "correct": 0, "tip": "set -u causes script to exit when referencing undefined variables." },
      { "question": "Complex array manipulation syntax?", "options": ["${array[@]:start:length} for array slicing", "${array[*]} for all elements", "${#array[@]} for length", "All of the above"], "correct": 3, "tip": "Bash provides comprehensive array manipulation capabilities." },
      { "question": "Process substitution vs command substitution?", "options": ["<(cmd) creates file, $(cmd) returns output", "Both are identical", "<(cmd) returns output, $(cmd) creates file", "Neither creates files"], "correct": 0, "tip": "Process substitution creates temporary files, command substitution captures output." },
      { "question": "Best practice for error handling?", "options": ["set -euo pipefail with error traps", "Manual error checking", "Ignore errors", "Only check critical errors"], "correct": 0, "tip": "Comprehensive error handling with pipefail catches pipeline failures." }
    ],
    "hard": [
      { "question": "Most memory-efficient way to process large files line by line?", "options": ["while IFS= read -r line; do process \"$line\"; done < file", "for line in $(cat file); do process \"$line\"; done", "mapfile -t lines < file; for line in \"${lines[@]}\"", "cat file | while read line"], "correct": 0, "tip": "Direct input redirection processes files without loading entire content into memory." },
      { "question": "How to implement robust error handling with cleanup?", "options": ["trap 'cleanup_function; exit 1' ERR EXIT", "set -e; trap cleanup_function EXIT", "if ! command; then cleanup; exit 1; fi", "try-catch syntax (not bash)"], "correct": 0, "tip": "Using trap with ERR and EXIT ensures cleanup runs on both errors and normal termination." }
    ]
  },
  "plsql": {
    "easy": [
      { "question": "Keyword to create stored procedure?", "options": ["CREATE PROCEDURE", "CREATE FUNCTION", "CREATE BLOCK", "CREATE ROUTINE"], "correct": 0, "tip": "CREATE PROCEDURE defines a stored procedure." },
      { "question": "How to declare variable?", "options": ["variable_name datatype;", "DECLARE variable_name datatype;", "VAR variable_name datatype;", "SET variable_name datatype;"], "correct": 0, "tip": "Variables declared with 'variable_name datatype;' in DECLARE section." }
    ],
    "medium": [
      { "question": "Difference between implicit and explicit cursors?", "options": ["Implicit cursors automatically created for SQL statements", "Explicit cursors provide better performance", "Implicit cursors only process single rows", "No functional difference"], "correct": 0, "tip": "Oracle automatically creates implicit cursors for SQL DML statements." }
    ],
    "hard": [
      { "question": "Optimal cursor design for large datasets?", "options": ["Use BULK COLLECT with LIMIT clause and proper exception handling", "Use simple cursor FOR loops", "Use multiple single-row fetch operations", "Use cursors without LIMIT restrictions"], "correct": 0, "tip": "BULK COLLECT with LIMIT prevents memory exhaustion while maintaining performance." }
    ]
  },
  "ubuntu": {
    "easy": [
      { "question": "Which package manager is used in Ubuntu/Debian?", "options": ["apt", "yum", "dnf", "zypper"], "correct": 0, "tip": "apt (Advanced Package Tool) is the package manager for Debian-based distributions." },
      { "question": "How do you update package lists in Ubuntu?", "options": ["apt update", "apt refresh", "apt sync", "apt fetch"], "correct": 0, "tip": "apt update refreshes the package index from configured repositories." }
    ],
    "medium": [
      { "question": "How do you add a PPA repository in Ubuntu?", "options": ["add-apt-repository ppa:name/ppa", "apt add-repo ppa:name/ppa", "apt-repo add ppa:name/ppa", "ppa-add name/ppa"], "correct": 0, "tip": "add-apt-repository is used to add Personal Package Archives (PPAs) in Ubuntu." }
    ],
    "hard": [
      { "question": "How do you create a local APT repository in Ubuntu?", "options": ["Use dpkg-scanpackages and apt-ftparchive", "Copy packages to /var/cache/apt/archives/", "Use apt-repo create command", "Configure /etc/apt/sources.list.d/"], "correct": 0, "tip": "Creating local repositories requires dpkg-scanpackages and apt-ftparchive tools to generate package indexes." }
    ]
  },
  "rhel": {
    "easy": [
      { "question": "Which package manager is used in RHEL 8+?", "options": ["dnf", "yum", "apt", "zypper"], "correct": 0, "tip": "dnf (Dandified YUM) is the package manager for RHEL 8+ and Fedora." },
      { "question": "What was the package manager in RHEL 7/CentOS 7?", "options": ["yum", "dnf", "apt", "rpm"], "correct": 0, "tip": "yum was the primary package manager in RHEL 7 and earlier versions." }
    ],
    "medium": [
      { "question": "How do you install packages from a specific repository in RHEL?", "options": ["dnf install --enablerepo=repo_name package", "dnf --repo repo_name install package", "dnf -r repo_name install package", "dnf install package --from-repo repo_name"], "correct": 0, "tip": "--enablerepo temporarily enables a repository for the current command." }
    ],
    "hard": [
      { "question": "How do you create a custom YUM/DNF repository in RHEL?", "options": ["Use createrepo_c to generate metadata and configure .repo file", "Copy RPMs to /var/cache/dnf/ and run dnf makecache", "Use dnf-repo-create command", "Configure /etc/yum.repos.d/ and run repodata-gen"], "correct": 0, "tip": "Custom repositories require createrepo_c to generate metadata and proper .repo file configuration." }
    ]
  }
}      { "question": "Which technique best optimizes network performance tuning?", "options": ["TCP window scaling and buffer tuning", "network interface bonding", "traffic shaping with tc", "kernel bypass with DPDK"], "correct": 0, "tip": "TCP window scaling and buffer tuning provide foundational network performance improvements." },
      { "question": "Best method for implementing high-availability clustering?", "options": ["Pacemaker with DRBD", "keepalived with VRRP", "corosync cluster engine", "custom heartbeat scripts"], "correct": 0, "tip": "Pacemaker with DRBD provides comprehensive HA clustering with data replication." },
      { "question": "Most efficient approach for container orchestration at scale?", "options": ["Kubernetes with proper resource management", "Docker Swarm with load balancing", "custom container management", "systemd with container units"], "correct": 0, "tip": "Kubernetes provides enterprise-grade container orchestration with scaling capabilities." },
      { "question": "Which method optimally handles backup and disaster recovery?", "options": ["Incremental backups with point-in-time recovery", "full backups with compression", "snapshot-based backups", "real-time replication"], "correct": 0, "tip": "Incremental backups with PITR provide optimal balance of storage and recovery capabilities." },
      { "question": "Best approach for implementing security hardening?", "options": ["CIS benchmarks with automated compliance", "custom security scripts", "SELinux with strict policies", "apparmor with profiles"], "correct": 0, "tip": "CIS benchmarks provide comprehensive, tested security hardening guidelines." },
      { "question": "Most effective method for performance profiling and optimization?", "options": ["perf with flame graphs", "valgrind for memory analysis", "gprof for function profiling", "custom profiling tools"], "correct": 0, "tip": "perf with flame graphs provides comprehensive system-wide performance analysis." },
      { "question": "Which technique best handles storage performance optimization?", "options": ["I/O scheduler tuning with SSD optimization", "RAID configuration optimization", "filesystem tuning parameters", "block device queue optimization"], "correct": 0, "tip": "I/O scheduler tuning provides fundamental storage performance improvements." },
      { "question": "Best method for implementing automated testing and validation?", "options": ["Ansible with molecule testing", "shell scripts with validation", "puppet with rspec testing", "custom testing frameworks"], "correct": 0, "tip": "Ansible with molecule provides comprehensive infrastructure testing capabilities." }
    ]
  },
  "bash": {
    "easy": [
      { "question": "How to make script executable?", "options": ["chmod +x script.sh", "execute script.sh", "run script.sh", "bash script.sh"], "correct": 0, "tip": "chmod +x adds execute permission." },
      { "question": "Correct shebang for bash script?", "options": ["#!/bin/bash", "#/bin/bash", "!/bin/bash", "@bin/bash"], "correct": 0, "tip": "#!/bin/bash tells system to use bash interpreter." },
      { "question": "How to read user input?", "options": ["read variable", "input variable", "get variable", "scan variable"], "correct": 0, "tip": "read command captures user input from stdin." },
      { "question": "Basic if statement syntax?", "options": ["if [ condition ]; then", "if (condition) {", "if condition:", "if <condition> then"], "correct": 0, "tip": "Bash uses square brackets for test conditions." },
      { "question": "How to access first command line argument?", "options": ["$1", "arg1", "argv[1]", "param1"], "correct": 0, "tip": "$1 represents the first positional parameter." },
      { "question": "Variable containing script name?", "options": ["$0", "$script", "$name", "$program"], "correct": 0, "tip": "$0 contains the name/path of script being executed." },
      { "question": "For loop syntax?", "options": ["for i in list; do ... done", "for (i in list) { ... }", "foreach i in list: ...", "for i = list do ... end"], "correct": 0, "tip": "Bash for loops use 'for variable in list; do commands; done'." },
      { "question": "String equality operator?", "options": ["=", "==", "eq", "equals"], "correct": 0, "tip": "Single equals is used for string comparison in bash." },
      { "question": "How to redirect output to file?", "options": ["command > file", "command >> file", "command -> file", "command write file"], "correct": 0, "tip": "Single > redirects stdout to file, overwriting content." },
      { "question": "What does $? contain?", "options": ["Exit status of last command", "Process ID", "Number of arguments", "Current directory"], "correct": 0, "tip": "$? holds exit status of most recently executed command." },
      { "question": "How to append output to file?", "options": ["command >> file", "command > file", "command + file", "command append file"], "correct": 0, "tip": "Double >> appends output without overwriting." },
      { "question": "Function definition syntax?", "options": ["function_name() { commands; }", "def function_name(): commands", "function function_name { commands }", "func function_name() { commands }"], "correct": 0, "tip": "Bash functions use name() { commands; } syntax." },
      { "question": "How to get argument count?", "options": ["$#", "$count", "$argc", "$args"], "correct": 0, "tip": "$# contains number of positional parameters." },
      { "question": "How to comment in bash?", "options": ["#", "//", "/*", "<!--"], "correct": 0, "tip": "# symbol starts comments in bash scripts." },
      { "question": "Command substitution syntax?", "options": ["$(command)", "$command", "${command}", "@command"], "correct": 0, "tip": "$(command) executes command and substitutes output." },
      { "question": "How to declare array?", "options": ["arr=(1 2 3)", "array arr[1,2,3]", "declare arr[1,2,3]", "set arr 1 2 3"], "correct": 0, "tip": "Arrays use parentheses with space-separated values." },
      { "question": "Access array element?", "options": ["${arr[0]}", "$arr[0]", "arr[0]", "${arr}[0]"], "correct": 0, "tip": "Array elements accessed with ${array[index]} syntax." },
      { "question": "Get all array elements?", "options": ["${arr[@]}", "$arr[@]", "arr[@]", "${arr[*]}"], "correct": 0, "tip": "${arr[@]} expands to all array elements." },
      { "question": "While loop syntax?", "options": ["while condition; do ... done", "while (condition) { ... }", "while condition: ...", "while condition do ... end"], "correct": 0, "tip": "Bash while loops use 'while condition; do commands; done'." },
      { "question": "Arithmetic evaluation?", "options": ["$((expression))", "$(expression)", "${expression}", "calc expression"], "correct": 0, "tip": "$((expression)) evaluates arithmetic expressions." },
      { "question": "String length?", "options": ["${#string}", "$length(string)", "len(string)", "${string.length}"], "correct": 0, "tip": "${#variable} returns string length." },
      { "question": "Variable exists check?", "options": ["[ -n \"$var\" ]", "[ $var ]", "[ exists $var ]", "[ defined $var ]"], "correct": 0, "tip": "[ -n \"$var\" ] tests if variable is non-empty." },
      { "question": "File exists check?", "options": ["[ -f filename ]", "[ exists filename ]", "[ file filename ]", "[ -e filename ]"], "correct": 0, "tip": "[ -f filename ] tests if file exists and is regular file." },
      { "question": "Directory exists check?", "options": ["[ -d dirname ]", "[ dir dirname ]", "[ exists dirname ]", "[ -f dirname ]"], "correct": 0, "tip": "[ -d dirname ] tests if directory exists." },
      { "question": "Numeric comparison operator?", "options": ["-eq", "==", "=", "equals"], "correct": 0, "tip": "-eq compares numbers for equality in bash." },
      { "question": "Greater than comparison?", "options": ["-gt", ">", "greater", "bigger"], "correct": 0, "tip": "-gt compares if first number is greater than second." },
      { "question": "Less than comparison?", "options": ["-lt", "<", "less", "smaller"], "correct": 0, "tip": "-lt compares if first number is less than second." },
      { "question": "Logical AND operator?", "options": ["&&", "and", "&", "AND"], "correct": 0, "tip": "&& performs logical AND operation." },
      { "question": "Logical OR operator?", "options": ["||", "or", "|", "OR"], "correct": 0, "tip": "|| performs logical OR operation." },
      { "question": "Case statement syntax?", "options": ["case $var in pattern) commands;; esac", "switch $var { case pattern: commands }", "case $var of pattern: commands", "select $var in pattern do commands"], "correct": 0, "tip": "Case statements use 'case var in pattern) commands;; esac' syntax." },
      { "question": "Default variable value?", "options": ["${var:-default}", "${var:default}", "$var || default", "${var} default"], "correct": 0, "tip": "${var:-default} uses default if var is unset or empty." },
      { "question": "Exit script with status?", "options": ["exit 0", "return 0", "quit 0", "stop 0"], "correct": 0, "tip": "exit command terminates script with specified status code." },
      { "question": "Current process ID?", "options": ["$", "$PID", "$PROCESS", "$ID"], "correct": 0, "tip": "$ contains current shell process ID." },
      { "question": "Background process ID?", "options": ["$!", "$BG", "$BACKGROUND", "$LAST"], "correct": 0, "tip": "$! contains process ID of last background command." },
      { "question": "How to source script?", "options": ["source script.sh", "run script.sh", "exec script.sh", "load script.sh"], "correct": 0, "tip": "source command executes script in current shell." },
      { "question": "Alternative to source?", "options": [". script.sh", "load script.sh", "include script.sh", "import script.sh"], "correct": 0, "tip": ". (dot) command is shorthand for source." },
      { "question": "Local variable in function?", "options": ["local var=value", "var=value local", "function var=value", "declare var=value"], "correct": 0, "tip": "local keyword creates function-scoped variables." },
      { "question": "Return value from function?", "options": ["return value", "exit value", "output value", "echo value"], "correct": 0, "tip": "return sets function exit status (0-255)." },
      { "question": "Function output capture?", "options": ["result=$(function_name)", "result=function_name", "result=${function_name}", "get result function_name"], "correct": 0, "tip": "Command substitution captures function output." },
      { "question": "Redirect stderr to file?", "options": ["command 2> file", "command err> file", "command error> file", "command stderr> file"], "correct": 0, "tip": "2> redirects stderr (file descriptor 2) to file." },
      { "question": "Redirect both stdout and stderr?", "options": ["command &> file", "command > file 2> file", "command >> file", "command 1&2> file"], "correct": 0, "tip": "&> redirects both stdout and stderr to same file." },
      { "question": "Pipe stderr to command?", "options": ["command 2>&1 | grep", "command stderr | grep", "command | grep 2>&1", "command err | grep"], "correct": 0, "tip": "2>&1 redirects stderr to stdout before piping." },
      { "question": "Null device for discarding output?", "options": ["/dev/null", "/dev/zero", "/null", "/dev/empty"], "correct": 0, "tip": "/dev/null discards all data written to it." },
      { "question": "Generate sequence of numbers?", "options": ["seq 1 10", "range 1 10", "numbers 1 10", "series 1 10"], "correct": 0, "tip": "seq generates sequence of numbers." },
      { "question": "Current working directory variable?", "options": ["$PWD", "$CWD", "$DIR", "$CURRENT"], "correct": 0, "tip": "$PWD contains current working directory path." },
      { "question": "Home directory variable?", "options": ["$HOME", "$HOMEDIR", "$USERDIR", "$HOUSE"], "correct": 0, "tip": "$HOME contains user's home directory path." },
      { "question": "Path environment variable?", "options": ["$PATH", "$PATHS", "$SEARCHPATH", "$BINPATH"], "correct": 0, "tip": "$PATH contains directories searched for commands." },
      { "question": "Random number generation?", "options": ["$RANDOM", "$RAND", "$RND", "random()"], "correct": 0, "tip": "$RANDOM generates random numbers 0-32767." },
      { "question": "Script execution time?", "options": ["time script.sh", "timer script.sh", "duration script.sh", "measure script.sh"], "correct": 0, "tip": "time command measures script execution time." },
      { "question": "Debug script execution?", "options": ["bash -x script.sh", "bash -debug script.sh", "bash -trace script.sh", "bash -verbose script.sh"], "correct": 0, "tip": "bash -x enables debug mode showing executed commands." },
      { "question": "Check if command exists?", "options": ["command -v cmd", "which cmd", "type cmd", "exists cmd"], "correct": 0, "tip": "command -v checks if command exists portably." },
      { "question": "Wait for background jobs?", "options": ["wait", "waitall", "jobwait", "background"], "correct": 0, "tip": "wait command waits for background jobs to complete." },
      { "question": "List active jobs?", "options": ["jobs", "joblist", "background", "active"], "correct": 0, "tip": "jobs command lists active background jobs." },
      { "question": "Bring job to foreground?", "options": ["fg", "foreground", "front", "active"], "correct": 0, "tip": "fg brings background job to foreground." },
      { "question": "Send job to background?", "options": ["bg", "background", "back", "behind"], "correct": 0, "tip": "bg resumes suspended job in background." },
      { "question": "Suspend current job?", "options": ["Ctrl+Z", "Ctrl+C", "Ctrl+S", "Ctrl+D"], "correct": 0, "tip": "Ctrl+Z suspends current foreground job." },
      { "question": "Terminate current job?", "options": ["Ctrl+C", "Ctrl+Z", "Ctrl+D", "Ctrl+X"], "correct": 0, "tip": "Ctrl+C sends SIGINT to terminate current job." },
      { "question": "End of file signal?", "options": ["Ctrl+D", "Ctrl+Z", "Ctrl+C", "Ctrl+EOF"], "correct": 0, "tip": "Ctrl+D sends EOF signal." },
      { "question": "Run command in subshell?", "options": ["(command)", "{command}", "[command]", "<command>"], "correct": 0, "tip": "Parentheses run commands in subshell." },
      { "question": "Group commands?", "options": ["{ command1; command2; }", "(command1; command2)", "[command1; command2]", "<command1; command2>"], "correct": 0, "tip": "Braces group commands in current shell." },
      { "question": "Conditional execution on success?", "options": ["cmd1 && cmd2", "cmd1 & cmd2", "cmd1 ; cmd2", "cmd1 | cmd2"], "correct": 0, "tip": "&& executes second command only if first succeeds." },
      { "question": "Conditional execution on failure?", "options": ["cmd1 || cmd2", "cmd1 |! cmd2", "cmd1 ; cmd2", "cmd1 & cmd2"], "correct": 0, "tip": "|| executes second command only if first fails." },
      { "question": "Command separator?", "options": [";", "&", "|", "&&"], "correct": 0, "tip": "; separates commands for sequential execution." },
      { "question": "Background execution?", "options": ["command &", "command bg", "command background", "bg command"], "correct": 0, "tip": "& runs command in background." },
      { "question": "Here document syntax?", "options": ["<<EOF", "<<<EOF", "<EOF", ">>EOF"], "correct": 0, "tip": "<<EOF starts here document ending with EOF." },
      { "question": "Here string syntax?", "options": ["<<<", "<<", "<", ">>"], "correct": 0, "tip": "<<< passes string as input to command." },
      { "question": "Process substitution?", "options": ["<(command)", "$(command)", "{command}", "[command]"], "correct": 0, "tip": "<(command) creates temporary file with command output." },
      { "question": "Brace expansion?", "options": ["{a,b,c}", "[a,b,c]", "(a,b,c)", "<a,b,c>"], "correct": 0, "tip": "{a,b,c} expands to multiple arguments." },
      { "question": "Range expansion?", "options": ["{1..10}", "[1..10]", "(1..10)", "<1..10>"], "correct": 0, "tip": "{1..10} expands to sequence 1 through 10." },
      { "question": "Parameter expansion length?", "options": ["${#param}", "$param.length", "length(param)", "len(param)"], "correct": 0, "tip": "${#param} returns parameter length." },
      { "question": "Substring extraction?", "options": ["${string:start:length}", "$string[start:length]", "substr(string,start,length)", "string.substring(start,length)"], "correct": 0, "tip": "${string:start:length} extracts substring." },
      { "question": "Pattern replacement?", "options": ["${string/pattern/replacement}", "$string.replace(pattern,replacement)", "replace(string,pattern,replacement)", "string.gsub(pattern,replacement)"], "correct": 0, "tip": "${string/pattern/replacement} replaces first match." },
      { "question": "Global pattern replacement?", "options": ["${string//pattern/replacement}", "${string/pattern/replacement/g}", "$string.replaceAll(pattern,replacement)", "gsub(pattern,replacement,string)"], "correct": 0, "tip": "${string//pattern/replacement} replaces all matches." },
      { "question": "Remove shortest prefix?", "options": ["${string#pattern}", "${string%pattern}", "$string.removePrefix(pattern)", "string.lstrip(pattern)"], "correct": 0, "tip": "${string#pattern} removes shortest matching prefix." },
      { "question": "Remove longest prefix?", "options": ["${string##pattern}", "${string%%pattern}", "$string.removeAllPrefix(pattern)", "string.strip(pattern)"], "correct": 0, "tip": "${string##pattern} removes longest matching prefix." },
      { "question": "Remove shortest suffix?", "options": ["${string%pattern}", "${string#pattern}", "$string.removeSuffix(pattern)", "string.rstrip(pattern)"], "correct": 0, "tip": "${string%pattern} removes shortest matching suffix." },
      { "question": "Remove longest suffix?", "options": ["${string%%pattern}", "${string##pattern}", "$string.removeAllSuffix(pattern)", "string.stripAll(pattern)"], "correct": 0, "tip": "${string%%pattern} removes longest matching suffix." },
      { "question": "Uppercase conversion?", "options": ["${string^^}", "$string.toUpperCase()", "upper(string)", "string.upper()"], "correct": 0, "tip": "${string^^} converts string to uppercase." },
      { "question": "Lowercase conversion?", "options": ["${string,,}", "$string.toLowerCase()", "lower(string)", "string.lower()"], "correct": 0, "tip": "${string,,} converts string to lowercase." },
      { "question": "Capitalize first letter?", "options": ["${string^}", "$string.capitalize()", "capitalize(string)", "string.title()"], "correct": 0, "tip": "${string^} capitalizes first character." },
      { "question": "Variable indirection?", "options": ["${!var}", "$var.getValue()", "indirect(var)", "getValue(var)"], "correct": 0, "tip": "${!var} uses var's value as variable name." },
      { "question": "Array length?", "options": ["${#array[@]}", "$array.length", "length(array)", "array.size()"], "correct": 0, "tip": "${#array[@]} returns array length." },
      { "question": "Array indices?", "options": ["${!array[@]}", "$array.indices()", "indices(array)", "array.keys()"], "correct": 0, "tip": "${!array[@]} returns array indices." },
      { "question": "Append to array?", "options": ["array+=(element)", "array.append(element)", "push(array,element)", "array.push(element)"], "correct": 0, "tip": "array+=(element) appends element to array." },
      { "question": "Unset variable?", "options": ["unset var", "delete var", "remove var", "clear var"], "correct": 0, "tip": "unset removes variable or array element." },
      { "question": "Readonly variable?", "options": ["readonly var", "const var", "final var", "immutable var"], "correct": 0, "tip": "readonly makes variable read-only." },
      { "question": "Export variable to environment?", "options": ["export var", "env var", "global var", "environ var"], "correct": 0, "tip": "export makes variable available to child processes." },
      { "question": "Declare variable type?", "options": ["declare -i var", "int var", "integer var", "numeric var"], "correct": 0, "tip": "declare -i creates integer variable." },
      { "question": "Associative array declaration?", "options": ["declare -A array", "assoc array", "hash array", "map array"], "correct": 0, "tip": "declare -A creates associative array." },
      { "question": "Function declaration alternative?", "options": ["function name() { commands; }", "def name() { commands; }", "proc name() { commands; }", "method name() { commands; }"], "correct": 0, "tip": "function keyword is alternative to name() syntax." },
      { "question": "Command line editing mode?", "options": ["set -o vi", "set -o emacs", "set -o edit", "set -o readline"], "correct": 0, "tip": "set -o vi enables vi-style command line editing." },
      { "question": "Strict mode for undefined variables?", "options": ["set -u", "set -strict", "set -undefined", "set -error"], "correct": 0, "tip": "set -u treats undefined variables as errors." },
      { "question": "Exit on command failure?", "options": ["set -e", "set -exit", "set -fail", "set -error"], "correct": 0, "tip": "set -e exits script when commands fail." },
      { "question": "Show executed commands?", "options": ["set -x", "set -debug", "set -trace", "set -verbose"], "correct": 0, "tip": "set -x shows commands before execution." },
      { "question": "Disable filename expansion?", "options": ["set -f", "set -noglob", "set -noexpand", "set -literal"], "correct": 0, "tip": "set -f disables filename globbing." },
      { "question": "Enable extended globbing?", "options": ["shopt -s extglob", "set -o extglob", "enable extglob", "glob extended"], "correct": 0, "tip": "shopt -s extglob enables extended pattern matching." },
      { "question": "Case-insensitive globbing?", "options": ["shopt -s nocaseglob", "set -o nocaseglob", "glob nocase", "case insensitive"], "correct": 0, "tip": "shopt -s nocaseglob enables case-insensitive pattern matching." },
      { "question": "Null globbing (no match returns empty)?", "options": ["shopt -s nullglob", "set -o nullglob", "glob null", "empty glob"], "correct": 0, "tip": "shopt -s nullglob makes unmatched patterns expand to nothing." }
    ],
    "medium": [
      { "question": "What does 'find /home -name \"*.log\" -mtime +7 -delete' do?", "options": ["Finds log files older than 7 days in /home and deletes them", "Finds .log files modified in last 7 days", "Creates log files with 7-day expiration", "Moves .log files older than 7 days"], "correct": 0, "tip": "This finds .log files older than 7 days and deletes them." },
      { "question": "Which command traces system calls?", "options": ["strace", "trace", "syscall", "debug"], "correct": 0, "tip": "strace intercepts and records system calls made by a process." },
      { "question": "What does 'awk '{print $3}' filename' do?", "options": ["Prints third field of each line", "Prints third line", "Prints every third character", "Prints file three times"], "correct": 0, "tip": "awk treats lines as fields separated by whitespace, $3 is third field." },
      { "question": "Which command shows open files for processes?", "options": ["lsof", "openfiles", "fuser", "handles"], "correct": 0, "tip": "lsof shows all files opened by processes, including network connections." },
      { "question": "What does 'sed 's/old/new/g' filename' do?", "options": ["Replaces all occurrences of 'old' with 'new'", "Searches for patterns", "Sorts lines", "Counts occurrences"], "correct": 0, "tip": "sed performs global substitution replacing all 'old' with 'new'." },
      { "question": "Which command monitors system calls in real-time?", "options": ["strace -f", "syscall", "monitor", "trace"], "correct": 0, "tip": "strace -f follows child processes and traces all system calls." },
      { "question": "What does 'xargs' command do?", "options": ["Converts input to command arguments", "Executes commands", "Extracts arguments", "Extended arguments"], "correct": 0, "tip": "xargs builds command lines from standard input." },
      { "question": "Which option makes grep show line numbers?", "options": ["-n", "-l", "-c", "-v"], "correct": 0, "tip": "grep -n displays line numbers with matching lines." },
      { "question": "What does 'cut -d: -f1 /etc/passwd' do?", "options": ["Extracts usernames from passwd file", "Cuts lines from file", "Deletes fields", "Formats file"], "correct": 0, "tip": "cut extracts first field using colon as delimiter." },
      { "question": "Which command shows file differences side by side?", "options": ["diff -y", "sdiff", "compare", "parallel"], "correct": 0, "tip": "diff -y displays differences in side-by-side format." },
      { "question": "What does 'tr' command do?", "options": ["Translates or deletes characters", "Transfers files", "Tracks changes", "Transforms data"], "correct": 0, "tip": "tr translates, squeezes, or deletes characters from input." },
      { "question": "Which command creates compressed archives?", "options": ["tar -czf", "zip", "compress", "archive"], "correct": 0, "tip": "tar -czf creates gzip-compressed tar archives." },
      { "question": "What does 'tee' command do?", "options": ["Writes output to file and stdout", "Creates T-junction", "Tests output", "Terminal echo"], "correct": 0, "tip": "tee splits output to both file and standard output." },
      { "question": "Which command shows network interface configuration?", "options": ["ifconfig", "netconfig", "ipconfig", "network"], "correct": 0, "tip": "ifconfig displays and configures network interfaces." },
      { "question": "What does 'nohup' command do?", "options": ["Runs commands immune to hangups", "No hang up", "Network hang up", "Non-stop"], "correct": 0, "tip": "nohup runs commands that continue after logout." },
      { "question": "Which command schedules one-time tasks?", "options": ["at", "cron", "schedule", "timer"], "correct": 0, "tip": "at schedules commands to run at specific times." },
      { "question": "What does 'nice' command modify?", "options": ["Process priority", "File permissions", "User niceness", "System nice"], "correct": 0, "tip": "nice runs commands with modified priority." },
      { "question": "Which command changes process priority?", "options": ["renice", "priority", "setprio", "chprio"], "correct": 0, "tip": "renice changes priority of running processes." },
      { "question": "What does 'screen' command provide?", "options": ["Terminal multiplexing", "Screen display", "Monitor screen", "Display settings"], "correct": 0, "tip": "screen creates virtual terminals that persist across sessions." },
      { "question": "Which command shows detailed process information?", "options": ["ps aux", "ps -l", "proc", "info"], "correct": 0, "tip": "ps aux shows comprehensive process information." },
      { "question": "What does 'pgrep' find?", "options": ["Processes by name", "Pattern grep", "Process grep", "Program grep"], "correct": 0, "tip": "pgrep finds process IDs by name or pattern." },
      { "question": "Which command kills processes by name?", "options": ["pkill", "killall", "kill -name", "proc-kill"], "correct": 0, "tip": "pkill terminates processes by name or pattern." },
      { "question": "What does 'fuser' command show?", "options": ["Processes using files", "File users", "User files", "Fusion users"], "correct": 0, "tip": "fuser shows processes using specific files or directories." },
      { "question": "Which command shows library dependencies?", "options": ["ldd", "lib", "depends", "libraries"], "correct": 0, "tip": "ldd shows shared library dependencies of executables." },
      { "question": "What does 'readlink' command do?", "options": ["Shows symbolic link target", "Reads links", "Link reader", "Read files"], "correct": 0, "tip": "readlink displays the target of symbolic links." },
      { "question": "Which command creates symbolic links?", "options": ["ln -s", "symlink", "link", "mklink"], "correct": 0, "tip": "ln -s creates symbolic (soft) links." },
      { "question": "What does 'file' command with -i option show?", "options": ["MIME type", "File info", "Internal type", "Inode info"], "correct": 0, "tip": "file -i displays MIME type instead of human description." },
      { "question": "Which command shows hexadecimal dump?", "options": ["hexdump", "hex", "dump", "od"], "correct": 0, "tip": "hexdump displays file contents in hexadecimal format." },
      { "question": "What does 'strings' command extract?", "options": ["Printable strings from files", "String data", "Text strings", "String format"], "correct": 0, "tip": "strings extracts printable character sequences from binary files." },
      { "question": "Which command compares directories?", "options": ["diff -r", "dirdiff", "compare", "dcmp"], "correct": 0, "tip": "diff -r recursively compares directory contents." },
      { "question": "What does 'rsync' do?", "options": ["Synchronizes files efficiently", "Remote sync", "Reliable sync", "Rapid sync"], "correct": 0, "tip": "rsync efficiently synchronizes files between locations." },
      { "question": "Which command shows network routing table?", "options": ["route", "netstat -r", "ip route", "routing"], "correct": 0, "tip": "route displays and manipulates IP routing table." },
      { "question": "What does 'ss' command show?", "options": ["Socket statistics", "System stats", "Service status", "Session stats"], "correct": 0, "tip": "ss displays socket statistics and connections." },
      { "question": "Which command monitors network traffic?", "options": ["tcpdump", "netmon", "traffic", "monitor"], "correct": 0, "tip": "tcpdump captures and displays network packets." },
      { "question": "What does 'iptables' manage?", "options": ["Firewall rules", "IP tables", "Network tables", "Routing tables"], "correct": 0, "tip": "iptables configures Linux firewall rules." },
      { "question": "Which command shows ARP table?", "options": ["arp", "arptable", "mac", "address"], "correct": 0, "tip": "arp displays and modifies ARP (Address Resolution Protocol) table." },
      { "question": "What does 'dig' command do?", "options": ["DNS lookup", "Disk information", "Directory information", "Digital signature"], "correct": 0, "tip": "dig performs DNS lookups and queries." },
      { "question": "Which command shows disk I/O statistics?", "options": ["iostat", "io", "diskstat", "ioinfo"], "correct": 0, "tip": "iostat displays input/output statistics for devices." },
      { "question": "What does 'sar' command monitor?", "options": ["System activity", "Service activity", "System archive", "Security audit"], "correct": 0, "tip": "sar collects and reports system activity information." },
      { "question": "Which command shows process tree with resources?", "options": ["htop", "top", "pstree", "procs"], "correct": 0, "tip": "htop shows interactive process tree with resource usage." },
      { "question": "What does 'lsof -i' show?", "options": ["Network connections", "Open files", "Internet files", "IP connections"], "correct": 0, "tip": "lsof -i displays network connections and listening ports." },
      { "question": "Which command shows SELinux context?", "options": ["ls -Z", "secontext", "context", "selinux"], "correct": 0, "tip": "ls -Z displays SELinux security context of files." },
      { "question": "What does 'getenforce' show?", "options": ["SELinux enforcement mode", "Security enforcement", "Policy enforcement", "Access enforcement"], "correct": 0, "tip": "getenforce displays current SELinux enforcement mode." },
      { "question": "Which command changes SELinux mode?", "options": ["setenforce", "enforce", "semode", "security"], "correct": 0, "tip": "setenforce changes SELinux enforcement mode." },
      { "question": "What does 'sestatus' display?", "options": ["SELinux status", "Security status", "Service status", "System status"], "correct": 0, "tip": "sestatus shows comprehensive SELinux status information." },
      { "question": "Which command shows extended attributes?", "options": ["getfattr", "xattr", "attr", "extattr"], "correct": 0, "tip": "getfattr displays extended attributes of files." },
      { "question": "What does 'setfattr' do?", "options": ["Sets extended attributes", "File attributes", "Security attributes", "Extended settings"], "correct": 0, "tip": "setfattr sets extended attributes on files." },
      { "question": "Which command shows file access control lists?", "options": ["getfacl", "acl", "facl", "access"], "correct": 0, "tip": "getfacl displays file access control lists (ACLs)." },
      { "question": "What does 'setfacl' modify?", "options": ["Access control lists", "File ACL", "Security lists", "Permission lists"], "correct": 0, "tip": "setfacl modifies access control lists on files." },
      { "question": "Which command shows systemd journal logs?", "options": ["journalctl", "systemd-log", "journal", "logs"], "correct": 0, "tip": "journalctl queries and displays systemd journal logs." }
    ],
    "hard": [
      { "question": "Best approach for processing large log files?", "options": ["awk with field processing and pattern matching", "grep with multiple pattern files", "sed with complex regex", "cut and sort pipelines"], "correct": 0, "tip": "awk is highly optimized for field processing and performs better than multiple tool combinations." },
      { "question": "Most efficient method for finding files larger than 100MB modified in last 30 days?", "options": ["find / -type f -size +100M -mtime -30 2>/dev/null", "locate -s +100M -mtime -30", "du -h / | awk '$1 > 100'", "ls -laR / | awk '$5 > 104857600'"], "correct": 0, "tip": "find with type, size, and mtime filters is most efficient with stderr redirection." },
      { "question": "Which complex awk script calculates running averages?", "options": ["awk '{sum+=$1; count++; avg=sum/count; print $0, avg}'", "awk '{print $1, average($1)}'", "awk 'BEGIN{avg=0} {avg=($1+avg)/2; print avg}'", "awk '{sum+=$1} END{print sum/NR}'"], "correct": 0, "tip": "This awk script maintains running sum and count for continuous average calculation." },
      { "question": "Most effective sed command for multi-line pattern replacement?", "options": ["sed -n '/start/,/end/{s/old/new/g; p}'", "sed 's/old/new/g'", "sed '/pattern/{N; s/old/new/g;}'", "sed -e '/start/,/end/s/old/new/g'"], "correct": 0, "tip": "This sed script processes multi-line patterns between start and end markers." },
      { "question": "Which find command efficiently processes results without fork overhead?", "options": ["find . -name '*.txt' -exec grep pattern {} +", "find . -name '*.txt' -exec grep pattern {} \\;", "find . -name '*.txt' | xargs grep pattern", "find . -name '*.txt' -print0 | xargs -0 grep pattern"], "correct": 3, "tip": "Using -print0 and xargs -0 handles filenames with spaces and minimizes process creation." },
      { "question": "Best method for monitoring real-time log files with pattern filtering?", "options": ["tail -f logfile | grep pattern", "watch 'tail logfile | grep pattern'", "tail -F logfile | awk '/pattern/'", "multitail with filtering"], "correct": 2, "tip": "tail -F handles log rotation and awk provides powerful pattern matching." },
      { "question": "Most efficient way to process large datasets with memory constraints?", "options": ["sort -S 1G --parallel=4 largefile", "cat largefile | sort", "split largefile; sort each; merge", "GNU sort with external sorting"], "correct": 0, "tip": "sort with memory limit and parallel processing optimizes large file handling." },
      { "question": "Which pipe combination efficiently deduplicates sorted data?", "options": ["sort largefile | uniq", "sort -u largefile", "awk '!seen[$0]++' largefile", "sort largefile | awk '!x[$0]++'"], "correct": 1, "tip": "sort -u is more efficient than sort | uniq for large datasets." },
      { "question": "Best approach for parsing complex log formats with multiple delimiters?", "options": ["awk with custom field separators", "cut with multiple delimiters", "sed with complex regex", "perl one-liners"], "correct": 0, "tip": "awk handles multiple field separators and complex parsing logic efficiently." },
      { "question": "Most effective method for system performance monitoring and alerting?", "options": ["Custom script with sar, iostat, and thresholds", "top with batch mode", "htop with logging", "vmstat continuous monitoring"], "correct": 0, "tip": "Combination of system tools with threshold-based alerting provides comprehensive monitoring." },
      { "question": "Which technique optimally handles large file transfers with verification?", "options": ["rsync with checksum verification", "scp with integrity check", "tar with compression and checksums", "rsync -avz with progress"], "correct": 0, "tip": "rsync with checksums ensures data integrity during large transfers." },
      { "question": "Best method for analyzing system call patterns in production?", "options": ["strace -c with statistical summary", "strace -f for all processes", "ltrace for library calls", "perf for system-wide analysis"], "correct": 3, "tip": "perf provides system-wide analysis with minimal overhead for production systems." },
      { "question": "Most efficient approach for large-scale file permission auditing?", "options": ["find with complex permission checks", "ls -laR with awk processing", "stat command with scripting", "find -printf with custom format"], "correct": 3, "tip": "find -printf provides efficient custom formatted output for permission auditing." },
      { "question": "Which method optimally processes streaming data with backpressure handling?", "options": ["named pipes with buffer management", "direct streaming with tee", "memory-mapped files", "producer-consumer with queues"], "correct": 0, "tip": "Named pipes with proper buffering handle backpressure in streaming scenarios." },
      { "question": "Best approach for implementing distributed file synchronization?", "options": ["rsync with SSH tunneling", "unison for bidirectional sync", "lsyncd for real-time sync", "csync2 for cluster sync"], "correct": 2, "tip": "lsyncd provides efficient real-time file synchronization using inotify." },
      { "question": "Most effective method for kernel parameter tuning and monitoring?", "options": ["sysctl with automated monitoring", "proc filesystem direct access", "tuned daemon with profiles", "/sys filesystem manipulation"], "correct": 2, "tip": "tuned daemon provides automated system tuning with predefined profiles." },
      { "question": "Which technique best handles high-frequency log rotation?", "options": ["logrotate with compression", "manual rotation with signals", "real-time log shipping", "memory-based logging"], "correct": 2, "tip": "Real-time log shipping prevents disk space issues with high-frequency logs." },
      { "question": "Best method for implementing zero-downtime deployments?", "options": ["blue-green deployment strategy", "rolling updates with health checks", "canary deployments", "symlink switching"], "correct": 3, "tip": "Symlink switching provides instant deployment switching with easy rollback." },
      { "question": "Most efficient approach for large-scale configuration management?", "options": ["Ansible with inventory management", "shell scripts with configuration files", "puppet with declarative configs", "custom configuration tools"], "correct": 0, "tip": "Ansible provides efficient agentless configuration management for large deployments." },
      { "question": "Which method optimally handles process lifecycle management?", "options": ["systemd with custom units", "supervisor with process monitoring", "custom init scripts", "container-based isolation"], "correct": 0, "tip": "systemd provides comprehensive process lifecycle management with dependencies." },
      { "question": "Best approach for implementing system-wide resource monitoring?", "options": ["collectd with custom plugins", "nagios with passive checks", "zabbix with active agents", "prometheus with exporters"], "correct": 3, "tip": "Prometheus with exporters provides modern metrics collection and alerting." },
      { "question": "Most effective method for handling large-scale log aggregation?", "options": ["ELK stack with beats", "fluentd with plugins", "rsyslog with templates", "custom log collectors"], "correct": 0, "tip": "ELK stack provides comprehensive log aggregation, processing, and visualization." },
      { "question": "Which technique best optimizes network performance tuning?", "options": ["TCP window scaling and buffer tuning", "network interface bonding", "traffic shaping with tc", "kernel bypass with DPDK"], "correct": 0,      { "question": "Which is true about recursive CTEs?", "options": ["They reference themselves", "They never terminate", "They're always infinite", "They can't be used"], "correct": 0, "tip": "Recursive CTEs can reference themselves to process hierarchical data." },
      { "question": "What is a pivot operation?", "options": ["Converts rows to columns", "Rotates table structure", "Pivots around axis", "Changes data direction"], "correct": 0, "tip": "PIVOT transforms row values into columns for cross-tabulation." },
      { "question": "Which isolation level provides highest consistency?", "options": ["SERIALIZABLE", "REPEATABLE READ", "READ COMMITTED", "READ UNCOMMITTED"], "correct": 0, "tip": "SERIALIZABLE provides complete isolation but lowest concurrency." },
      { "question": "What does MERGE statement do?", "options": ["INSERT, UPDATE, or DELETE based on conditions", "Merges two tables", "Combines queries", "Joins datasets"], "correct": 0, "tip": "MERGE performs conditional INSERT, UPDATE, or DELETE in single statement." },
      { "question": "Which function returns row position within partition?", "options": ["ROW_NUMBER()", "POSITION()", "LOCATE()", "RANK()"], "correct": 0, "tip": "ROW_NUMBER() provides sequential numbering within each partition." },
      { "question": "What is query optimization?", "options": ["Improving query performance", "Writing better queries", "Optimizing database", "Reducing code"], "correct": 0, "tip": "Query optimization improves execution speed and resource usage." },
      { "question": "Which index type is best for range queries?", "options": ["B-tree index", "Hash index", "Bitmap index", "Function-based index"], "correct": 0, "tip": "B-tree indexes efficiently handle range and equality queries." },
      { "question": "What does EXPLAIN PLAN show?", "options": ["Query execution strategy", "Table structure", "Data relationships", "Performance metrics"], "correct": 0, "tip": "EXPLAIN PLAN reveals how database will execute a query." },
      { "question": "Which join algorithm is most efficient for large tables?", "options": ["Hash join", "Nested loop", "Merge join", "Cross join"], "correct": 0, "tip": "Hash join is typically most efficient for large table joins." },
      { "question": "What is a covering index?", "options": ["Index containing all required columns", "Index covering entire table", "Complete index structure", "Full table index"], "correct": 0, "tip": "Covering index includes all columns needed for a query." },
      { "question": "Which technique reduces table size?", "options": ["Normalization", "Denormalization", "Replication", "Partitioning"], "correct": 0, "tip": "Normalization eliminates redundancy and reduces storage requirements." },
      { "question": "What is table partitioning?", "options": ["Dividing large tables into smaller pieces", "Creating table sections", "Splitting data types", "Organizing columns"], "correct": 0, "tip": "Partitioning divides large tables for better performance and management." },
      { "question": "Which is true about materialized views?", "options": ["Store query results physically", "Always current data", "Virtual only", "Cannot be indexed"], "correct": 0, "tip": "Materialized views physically store query results for faster access." },
      { "question": "What does query caching do?", "options": ["Stores query results in memory", "Saves query text", "Caches table data", "Preserves connections"], "correct": 0, "tip": "Query caching stores results in memory for repeated identical queries." },
      { "question": "Which technique improves JOIN performance?", "options": ["Proper indexing on join columns", "Using more tables", "Adding WHERE clauses", "Increasing memory"], "correct": 0, "tip": "Indexes on join columns significantly improve join performance." },
      { "question": "What is connection pooling?", "options": ["Reusing database connections", "Pooling data together", "Connecting multiple databases", "Sharing user connections"], "correct": 0, "tip": "Connection pooling reuses connections to reduce overhead." },
      { "question": "Which statement about transactions is true?", "options": ["ACID properties ensure reliability", "Transactions always succeed", "No rollback possible", "Automatic commits only"], "correct": 0, "tip": "ACID (Atomicity, Consistency, Isolation, Durability) ensures reliable transactions." },
      { "question": "What does database deadlock mean?", "options": ["Two transactions blocking each other", "Database stopped working", "All connections locked", "System crashed"], "correct": 0, "tip": "Deadlock occurs when transactions wait for each other's resources." },
      { "question": "Which backup type captures only changes?", "options": ["Incremental backup", "Full backup", "Differential backup", "Complete backup"], "correct": 0, "tip": "Incremental backup captures only changes since last backup." },
      { "question": "What is database replication?", "options": ["Copying data to multiple servers", "Duplicating queries", "Repeating operations", "Backup creation"], "correct": 0, "tip": "Replication maintains synchronized copies of data across multiple servers." },
      { "question": "Which constraint can span multiple tables?", "options": ["Foreign key constraint", "Primary key constraint", "Unique constraint", "Check constraint"], "correct": 0, "tip": "Foreign key constraints reference columns in other tables." },
      { "question": "What is database sharding?", "options": ["Horizontal partitioning across servers", "Vertical table splitting", "Data compression", "Index optimization"], "correct": 0, "tip": "Sharding distributes data across multiple database servers horizontally." },
      { "question": "Which factor most affects query performance?", "options": ["Index usage", "Table size", "Column count", "Data types"], "correct": 0, "tip": "Proper index usage is typically the most critical performance factor." },
      { "question": "What does ACID stand for?", "options": ["Atomicity, Consistency, Isolation, Durability", "Automatic, Complete, Integrated, Database", "Advanced, Concurrent, Independent, Distributed", "All, Coordinated, Immediate, Durable"], "correct": 0, "tip": "ACID properties ensure reliable transaction processing." },
      { "question": "Which join operation preserves all rows from both tables?", "options": ["FULL OUTER JOIN", "CROSS JOIN", "UNION JOIN", "NATURAL JOIN"], "correct": 0, "tip": "FULL OUTER JOIN includes all rows from both tables with NULLs for non-matches." },
      { "question": "What is the purpose of database indexing?", "options": ["Speed up data retrieval", "Compress data", "Secure data", "Validate data"], "correct": 0, "tip": "Indexes create fast access paths to table data." },
      { "question": "Which window function calculates moving averages?", "options": ["AVG() OVER(ROWS BETWEEN...)", "MOVING_AVG()", "SLIDING_AVG()", "WINDOW_AVG()"], "correct": 0, "tip": "AVG() with window frame calculates moving averages." },
      { "question": "What is denormalization?", "options": ["Adding redundancy for performance", "Removing normal forms", "Data corruption", "Error in design"], "correct": 0, "tip": "Denormalization adds controlled redundancy to improve query performance." },
      { "question": "Which technique handles hierarchical data?", "options": ["Recursive CTEs", "Self joins only", "Multiple tables", "Special datatypes"], "correct": 0, "tip": "Recursive CTEs efficiently process hierarchical and tree-structured data." },
      { "question": "What does database clustering provide?", "options": ["High availability and load distribution", "Data grouping", "Index clustering", "Column grouping"], "correct": 0, "tip": "Database clustering provides redundancy and distributes workload." },
      { "question": "Which is true about stored procedures?", "options": ["Precompiled for better performance", "Always slower than queries", "Cannot use parameters", "Only for data retrieval"], "correct": 0, "tip": "Stored procedures are precompiled and cached for improved performance." },
      { "question": "What is database normalization's main goal?", "options": ["Eliminate data redundancy", "Increase performance", "Reduce table count", "Simplify queries"], "correct": 0, "tip": "Normalization eliminates redundancy and prevents data anomalies." },
      { "question": "Which constraint prevents inconsistent data?", "options": ["Foreign key constraint", "Primary key constraint", "Unique constraint", "Default constraint"], "correct": 0, "tip": "Foreign key constraints maintain referential integrity between related tables." },
      { "question": "What does query plan optimization involve?", "options": ["Choosing best execution strategy", "Writing better SQL", "Adding more indexes", "Increasing memory"], "correct": 0, "tip": "Query optimizer selects the most efficient execution plan." },
      { "question": "Which backup strategy provides fastest recovery?", "options": ["Full + incremental backups", "Full backups only", "Log backups only", "No backup strategy"], "correct": 0, "tip": "Combination of full and incremental backups balances storage and recovery time." },
      { "question": "What is database transaction log?", "options": ["Record of all database changes", "List of user transactions", "Error log file", "Performance metrics"], "correct": 0, "tip": "Transaction log records all changes for recovery and replication." },
      { "question": "Which feature ensures data consistency across transactions?", "options": ["Locking mechanisms", "Indexing", "Partitioning", "Replication"], "correct": 0, "tip": "Locking prevents concurrent transactions from interfering with each other." },
      { "question": "What is the benefit of columnstore indexes?", "options": ["Optimized for analytical queries", "Faster row operations", "Reduced storage", "Better concurrency"], "correct": 0, "tip": "Columnstore indexes excel at analytical queries that scan many rows." },
      { "question": "Which technique improves large table scans?", "options": ["Parallel processing", "More indexes", "Smaller datatypes", "Table compression"], "correct": 0, "tip": "Parallel processing divides work across multiple processors." },
      { "question": "What does database fragmentation affect?", "options": ["Query performance", "Data accuracy", "Security", "User access"], "correct": 0, "tip": "Fragmentation causes scattered data storage, reducing performance." },
      { "question": "Which is most important for OLTP systems?", "options": ["Fast individual transactions", "Complex reporting", "Large batch operations", "Data warehousing"], "correct": 0, "tip": "OLTP (Online Transaction Processing) prioritizes quick individual transactions." }
    ],
    "hard": [
      { "question": "Which approach provides best performance for finding second highest salary?", "options": ["SELECT MAX(salary) FROM employees WHERE salary < (SELECT MAX(salary) FROM employees)", "SELECT salary FROM (SELECT salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rn FROM employees) WHERE rn = 2", "SELECT salary FROM (SELECT DISTINCT salary, RANK() OVER (ORDER BY salary DESC) as rnk FROM employees) WHERE rnk = 2", "SELECT salary FROM employees ORDER BY salary DESC LIMIT 1 OFFSET 1"], "correct": 1, "tip": "ROW_NUMBER() with ORDER BY provides consistent performance and handles duplicates properly." },
      { "question": "Most efficient pagination for large datasets?", "options": ["SELECT * FROM table ORDER BY id LIMIT 20 OFFSET 1000", "SELECT * FROM table WHERE id > last_id ORDER BY id LIMIT 20", "SELECT * FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY id) as rn FROM table) WHERE rn BETWEEN 1001 AND 1020", "SELECT TOP 20 * FROM table WHERE id NOT IN (SELECT TOP 1000 id FROM table ORDER BY id) ORDER BY id"], "correct": 1, "tip": "Cursor-based pagination using WHERE clauses is most efficient for large datasets." },
      { "question": "Which index strategy optimizes this query: SELECT * FROM orders WHERE customer_id = ? AND order_date BETWEEN ? AND ?", "options": ["CREATE INDEX ON orders(customer_id)", "CREATE INDEX ON orders(order_date)", "CREATE INDEX ON orders(customer_id, order_date)", "CREATE INDEX ON orders(order_date, customer_id)"], "correct": 2, "tip": "Composite index with most selective column first optimizes range queries." },
      { "question": "Best approach for handling slowly changing dimensions in data warehouse?", "options": ["SCD Type 1 (overwrite)", "SCD Type 2 (versioning)", "SCD Type 3 (current/previous)", "SCD Type 6 (hybrid)"], "correct": 1, "tip": "SCD Type 2 maintains full history by creating new records for changes." },
      { "question": "Most efficient way to find duplicates in large table?", "options": ["SELECT col, COUNT(*) FROM table GROUP BY col HAVING COUNT(*) > 1", "SELECT * FROM table a WHERE EXISTS (SELECT 1 FROM table b WHERE a.col = b.col AND a.id <> b.id)", "SELECT * FROM table WHERE col IN (SELECT col FROM table GROUP BY col HAVING COUNT(*) > 1)", "WITH ranked AS (SELECT *, ROW_NUMBER() OVER (PARTITION BY col ORDER BY id) as rn FROM table) SELECT * FROM ranked WHERE rn > 1"], "correct": 3, "tip": "Window functions with ROW_NUMBER() efficiently identify and handle duplicates." },
      { "question": "Optimal strategy for bulk data loading?", "options": ["Multiple single INSERT statements", "INSERT with VALUES clause", "BULK INSERT with minimal logging", "INSERT INTO SELECT with small batches"], "correct": 2, "tip": "BULK INSERT with minimal logging provides best performance for large data loads." },
      { "question": "Which technique best handles hierarchical queries with unlimited depth?", "options": ["Self joins with fixed levels", "Recursive CTEs", "Multiple UNION queries", "Nested subqueries"], "correct": 1, "tip": "Recursive CTEs efficiently traverse hierarchical data of any depth." },
      { "question": "Most effective approach for query optimization in OLAP systems?", "options": ["More indexes on fact tables", "Columnstore indexes and partitioning", "Denormalization only", "In-memory tables"], "correct": 1, "tip": "Columnstore indexes with partitioning optimize analytical workloads." },
      { "question": "Best strategy for managing database deadlocks?", "options": ["Increase lock timeout", "Use READ UNCOMMITTED isolation", "Access tables in consistent order", "Disable locking"], "correct": 2, "tip": "Accessing resources in consistent order prevents circular wait conditions." },
      { "question": "Which approach optimizes star schema queries?", "options": ["Index all dimension tables", "Partition fact table by date", "Use covering indexes on fact table", "All of the above"], "correct": 3, "tip": "Comprehensive indexing and partitioning strategy optimizes star schema performance." },
      { "question": "Most efficient method for real-time data synchronization?", "options": ["Batch ETL processes", "Change data capture (CDC)", "Full table replication", "Trigger-based replication"], "correct": 1, "tip": "CDC captures only changes, minimizing overhead for real-time sync." },
      { "question": "Best practice for handling NULL values in aggregations?", "options": ["COALESCE with default values", "ISNULL with zero replacement", "Conditional aggregation with CASE", "Exclude NULLs with WHERE clause"], "correct": 2, "tip": "Conditional aggregation provides most control over NULL handling in business logic." },
      { "question": "Optimal indexing strategy for multi-column searches?", "options": ["Separate indexes on each column", "Composite index with most selective column first", "Covering index with all columns", "Full-text index"], "correct": 1, "tip": "Composite index with most selective column first provides optimal performance." },
      { "question": "Which technique best handles temporal data queries?", "options": ["Standard datetime columns", "Temporal tables with system versioning", "Separate audit tables", "Snapshot tables"], "correct": 1, "tip": "Temporal tables automatically manage historical data with built-in querying capabilities." },
      { "question": "Most effective approach for cross-database queries?", "options": ["Database links", "ETL to central database", "Federated queries", "Application-level joins"], "correct": 1, "tip": "ETL to central database provides best performance and consistency." },
      { "question": "Best strategy for handling large result sets?", "options": ["Increase memory allocation", "Use streaming/cursor-based processing", "Add more indexes", "Parallel processing only"], "correct": 1, "tip": "Streaming processes large results without loading everything into memory." },
      { "question": "Which approach optimizes complex analytical queries?", "options": ["More detailed indexes", "Pre-aggregated summary tables", "In-memory processing", "Query rewriting"], "correct": 1, "tip": "Pre-aggregated tables eliminate repetitive calculations in analytical queries." },
      { "question": "Most efficient way to implement soft deletes?", "options": ["DELETE with backup", "UPDATE with deleted flag", "Move to archive table", "Use temporal tables"], "correct": 3, "tip": "Temporal tables provide comprehensive soft delete functionality with history." },
      { "question": "Best practice for database connection management?", "options": ["One connection per user", "Connection pooling with optimal size", "Persistent connections only", "New connection per query"], "correct": 1, "tip": "Connection pooling with right-sized pools balances resource usage and performance." },
      { "question": "Which technique best handles database schema evolution?", "options": ["Version control scripts", "Database migration tools", "Manual updates", "Schema comparison tools"], "correct": 1, "tip": "Migration tools provide automated, versioned, and rollback-capable schema changes." },
      { "question": "Most effective method for query performance monitoring?", "options": ["Manual EXPLAIN plans", "Automated query plan analysis", "Performance counters only", "Log file analysis"], "correct": 1, "tip": "Automated analysis identifies performance patterns and regressions systematically." },
      { "question": "Best approach for handling JSON data in relational databases?", "options": ["Store as text with parsing functions", "Native JSON columns with indexes", "Separate normalized tables", "NoSQL database instead"], "correct": 1, "tip": "Native JSON support with specialized indexes provides best performance." },
      { "question": "Which strategy optimizes batch processing workflows?", "options": ["Sequential processing", "Parallel processing with dependency management", "Single large transaction", "Multiple small transactions"], "correct": 1, "tip": "Parallel processing with proper dependency management maximizes throughput." },
      { "question": "Most efficient approach for data archiving?", "options": ["DELETE old data", "Partition with automated dropping", "Move to separate archive database", "Compress old data"], "correct": 1, "tip": "Partition dropping provides fastest and most efficient archiving method." },
      { "question": "Best practice for handling database failover?", "options": ["Manual intervention", "Automatic failover with monitoring", "Load balancer failover", "Application-level retry"], "correct": 1, "tip": "Automatic failover with comprehensive monitoring minimizes downtime." },
      { "question": "Which technique best optimizes join performance on large tables?", "options": ["Nested loop joins", "Hash joins with memory optimization", "Sort-merge joins", "Parallel hash joins"], "correct": 3, "tip": "Parallel hash joins provide best performance for large table joins." },
      { "question": "Most effective method for handling database constraints in ETL?", "options": ["Disable constraints during load", "Validate data before loading", "Use MERGE statements", "Load to staging first"], "correct": 3, "tip": "Staging allows data validation and transformation before applying constraints." },
      { "question": "Best approach for implementing database auditing?", "options": ["Trigger-based auditing", "Change data capture", "Database audit logs", "Application-level logging"], "correct": 2, "tip": "Database audit logs provide comprehensive, tamper-proof auditing capabilities." },
      { "question": "Which strategy best handles database security?", "options": ["Application-level security only", "Multi-layered security with RBAC", "Database encryption only", "Network security only"], "correct": 1, "tip": "Multi-layered approach with role-based access control provides comprehensive security." },
      { "question": "Most efficient way to implement database backup strategies?", "options": ["Full backups only", "Differential backups with log shipping", "Snapshot-based backups", "Continuous replication"], "correct": 3, "tip": "Continuous replication provides best RTO/RPO with minimal data loss." }
    ]
  },
  "unix": {
    "easy": [
      { "question": "Which command displays file contents?", "options": ["cat", "show", "display", "view"], "correct": 0, "tip": "cat concatenates and displays file content." },
      { "question": "What does 'ls' command do?", "options": ["Lists files and directories", "Creates new file", "Deletes files", "Edits files"], "correct": 0, "tip": "ls lists directory contents, similar to 'dir' in Windows." },
      { "question": "Which command changes directory?", "options": ["cd", "chdir", "changedir", "goto"], "correct": 0, "tip": "cd (change directory) navigates between directories." },
      { "question": "What does 'pwd' display?", "options": ["Current working directory", "Password info", "Process data", "Document"], "correct": 0, "tip": "pwd shows the full path of current directory." },
      { "question": "Which command creates directories?", "options": ["mkdir", "createdir", "newdir", "makefolder"], "correct": 0, "tip": "mkdir creates new directories in the filesystem." },
      { "question": "What does 'rm' command do?", "options": ["Removes files and directories", "Renames files", "Reads mail", "Runs programs"], "correct": 0, "tip": "rm deletes files and directories from filesystem." },
      { "question": "Which command copies files?", "options": ["cp", "copy", "duplicate", "clone"], "correct": 0, "tip": "cp creates duplicates of files and directories." },
      { "question": "What does 'mv' command do?", "options": ["Moves or renames files", "Makes variables", "Monitors videos", "Multiple views"], "correct": 0, "tip": "mv relocates files/directories or renames them." },
      { "question": "Which command shows running processes?", "options": ["ps", "proc", "process", "show"], "correct": 0, "tip": "ps displays information about running processes." },
      { "question": "What does 'grep' do?", "options": ["Searches for patterns in text", "Groups files", "Gets remote files", "Generates reports"], "correct": 0, "tip": "grep searches for patterns within files or input streams." },
      { "question": "Which command shows last lines of file?", "options": ["tail", "end", "bottom", "last"], "correct": 0, "tip": "tail shows last few lines, useful for log monitoring." },
      { "question": "What does 'head' show?", "options": ["First lines of file", "File headers", "Main directory", "Top processes"], "correct": 0, "tip": "head displays first few lines of a file." },
      { "question": "Which command counts lines, words, characters?", "options": ["wc", "count", "calc", "measure"], "correct": 0, "tip": "wc (word count) counts lines, words, and characters." },
      { "question": "What does 'chmod' command do?", "options": ["Changes file permissions", "Changes file mode", "Changes file owner", "Changes file name"], "correct": 0, "tip": "chmod modifies file and directory permissions." },
      { "question": "Which command shows file permissions?", "options": ["ls -l", "chmod -l", "perm", "show-perm"], "correct": 0, "tip": "ls -l displays detailed file information including permissions." },
      { "question": "What does 'which' command do?", "options": ["Shows command location", "Asks which file", "Shows which user", "Displays options"], "correct": 0, "tip": "which shows the full path of commands." },
      { "question": "Which command displays current user?", "options": ["whoami", "who", "user", "me"], "correct": 0, "tip": "whoami shows the current username." },
      { "question": "What does 'touch' command do?", "options": ["Creates empty file or updates timestamp", "Touches screen", "Tests connection", "Checks file"], "correct": 0, "tip": "touch creates new empty files or updates existing file timestamps." },
      { "question": "Which command shows disk usage?", "options": ["df", "disk", "usage", "space"], "correct": 0, "tip": "df displays filesystem disk space usage." },
      { "question": "What does 'du' command show?", "options": ["Directory usage", "Disk utility", "Data units", "Dynamic updates"], "correct": 0, "tip": "du shows disk usage of directories and files." },
      { "question": "Which command shows system uptime?", "options": ["uptime", "time", "runtime", "systime"], "correct": 0, "tip": "uptime shows how long system has been running." },
      { "question": "What does 'date' command display?", "options": ["Current date and time", "Data information", "File dates", "System dates"], "correct": 0, "tip": "date shows or sets the system date and time." },
      { "question": "Which command shows logged in users?", "options": ["who", "users", "whoami", "logged"], "correct": 0, "tip": "who displays currently logged in users." },
      { "question": "What does 'history' command do?", "options": ["Shows command history", "Shows file history", "Shows login history", "Shows system history"], "correct": 0, "tip": "history displays previously executed commands." },
      { "question": "Which command clears terminal screen?", "options": ["clear", "cls", "clean", "reset"], "correct": 0, "tip": "clear clears the terminal screen." },
      { "question": "What does 'man' command do?", "options": ["Shows manual pages", "Manages files", "Makes directories", "Monitors system"], "correct": 0, "tip": "man displays manual pages for commands." },
      { "question": "Which command shows file type?", "options": ["file", "type", "kind", "format"], "correct": 0, "tip": "file command determines file type and format." },
      { "question": "What does 'echo' command do?", "options": ["Displays text", "Creates echo", "Repeats sound", "Shows environment"], "correct": 0, "tip": "echo displays text to standard output." },
      { "question": "Which command changes file owner?", "options": ["chown", "owner", "chmod", "change"], "correct": 0, "tip": "chown changes file and directory ownership." },
      { "question": "What does 'ln' command create?", "options": ["Links to files", "Line numbers", "List names", "Log entries"], "correct": 0, "tip": "ln creates hard or symbolic links to files." },
      { "question": "Which command shows environment variables?", "options": ["env", "vars", "environment", "set"], "correct": 0, "tip": "env displays environment variables." },
      { "question": "What does 'sort' command do?", "options": ["Sorts lines in files", "Organizes directories", "Arranges processes", "Orders commands"], "correct": 0, "tip": "sort arranges lines of text in specified order." },
      { "question": "Which command removes empty directories?", "options": ["rmdir", "rm -d", "deletedir", "remove"], "correct": 0, "tip": "rmdir removes empty directories only." },
      { "question": "What does 'uniq' command do?", "options": ["Removes duplicate lines", "Makes files unique", "Shows unique users", "Creates unique IDs"], "correct": 0, "tip": "uniq filters out repeated lines in sorted input." },
      { "question": "Which command compresses files?", "options": ["gzip", "compress", "zip", "pack"], "correct": 0, "tip": "gzip is a common compression utility in Unix systems." },
      { "question": "What does 'tar' command do?", "options": ["Archives files", "Targets files", "Transfers files", "Tracks files"], "correct": 0, "tip": "tar creates and extracts archive files." },
      { "question": "Which command shows network connections?", "options": ["netstat", "network", "connections", "net"], "correct": 0, "tip": "netstat displays network connections and statistics." },
      { "question": "What does 'ping' command test?", "options": ["Network connectivity", "System ping", "File ping", "User ping"], "correct": 0, "tip": "ping tests network connectivity to other hosts." },
      { "question": "Which command shows system information?", "options": ["uname", "sysinfo", "system", "info"], "correct": 0, "tip": "uname displays system information like OS and kernel." },
      { "question": "What does 'kill' command do?", "options": ["Terminates processes", "Kills files", "Stops system", "Ends sessions"], "correct": 0, "tip": "kill sends signals to terminate processes." },
      { "question": "Which command shows process tree?", "options": ["pstree", "ps -tree", "proctree", "tree"], "correct": 0, "tip": "pstree displays processes in tree format." },
      { "question": "What does 'jobs' command show?", "options": ["Background jobs", "Job listings", "Work items", "Task queue"], "correct": 0, "tip": "jobs shows active background jobs in current shell." },
      { "question": "Which command brings job to foreground?", "options": ["fg", "foreground", "front", "bring"], "correct": 0, "tip": "fg brings background jobs to foreground." },
      { "question": "What does 'bg' command do?", "options": ["Puts jobs in background", "Shows background", "Big files", "Backup"], "correct": 0, "tip": "bg resumes suspended jobs in background." },
      { "question": "Which command shows mounted filesystems?", "options": ["mount", "filesystems", "mounted", "fs"], "correct": 0, "tip": "mount without arguments shows mounted filesystems." },
      { "question": "What does 'umount' do?", "options": ["Unmounts filesystems", "Shows unmounted", "Updates mount", "User mount"], "correct": 0, "tip": "umount detaches filesystems from mount points." },
      { "question": "Which command shows file checksums?", "options": ["md5sum", "checksum", "hash", "verify"], "correct": 0, "tip": "md5sum calculates MD5 checksums for files." },
      { "question": "What does 'diff' command compare?", "options": ["File differences", "Different files", "Data differences", "Directory diffs"], "correct": 0, "tip": "diff shows differences between files line by line." },
      { "question": "Which command monitors file changes?", "options": ["watch", "monitor", "observe", "track"], "correct": 0, "tip": "watch repeatedly executes commands to monitor changes." },
      { "question": "What does 'crontab' manage?", "options": ["Scheduled tasks", "Cron tables", "Time tables", "Task tables"], "correct": 0, "tip": "crontab manages scheduled tasks and jobs." },
      { "question": "Which command shows memory usage?", "options": ["free", "memory", "mem", "usage"], "correct": 0, "tip": "free displays memory and swap usage." },
      { "question": "What does 'top' command display?", "options": ["Running processes and system stats", "Top files", "Top directories", "Top users"], "correct": 0, "tip": "top shows real-time system processes and resource usage." },
      { "question": "Which command shows system load?", "options": ["uptime", "load", "system", "stats"], "correct": 0, "tip": "uptime shows system load averages." },
      { "question": "What does 'iostat' monitor?", "options": ["I/O statistics", "Input/output stats", "System I/O", "Disk I/O"], "correct": 0, "tip": "iostat shows input/output statistics for devices." },
      { "question": "Which command shows open files?{
  "sql": {
    "easy": [
      { "question": "Which SQL statement is used to extract data from a database?", "options": ["SELECT", "EXTRACT", "GET", "OPEN"], "correct": 0, "tip": "SELECT is the fundamental statement for querying data." },
      { "question": "Which clause is used to filter rows before grouping?", "options": ["WHERE", "HAVING", "FILTER", "CONDITION"], "correct": 0, "tip": "WHERE clause filters individual rows before GROUP BY." },
      { "question": "What does the SQL INSERT statement do?", "options": ["Adds new records to a table", "Updates existing records", "Deletes records", "Creates a new table"], "correct": 0, "tip": "INSERT statement adds new rows to an existing table." },
      { "question": "Which operator is used for pattern matching?", "options": ["LIKE", "MATCH", "FIND", "SEARCH"], "correct": 0, "tip": "LIKE operator is used with wildcards for pattern matching." },
      { "question": "What does NULL represent in SQL?", "options": ["Missing or unknown value", "Zero value", "Empty string", "False value"], "correct": 0, "tip": "NULL represents the absence of a value." },
      { "question": "Which statement modifies existing data?", "options": ["UPDATE", "MODIFY", "CHANGE", "ALTER"], "correct": 0, "tip": "UPDATE statement modifies existing records in a table." },
      { "question": "How do you delete all records from a table?", "options": ["DELETE FROM table_name", "REMOVE * FROM table_name", "DROP ALL FROM table_name", "CLEAR table_name"], "correct": 0, "tip": "DELETE FROM removes all rows while preserving table structure." },
      { "question": "Which clause sorts the result set?", "options": ["ORDER BY", "SORT BY", "GROUP BY", "ARRANGE BY"], "correct": 0, "tip": "ORDER BY sorts results in ascending or descending order." },
      { "question": "What does the DISTINCT keyword do?", "options": ["Returns only unique values", "Counts rows", "Sorts results", "Groups results"], "correct": 0, "tip": "DISTINCT eliminates duplicate rows from the result set." },
      { "question": "Which function counts rows?", "options": ["COUNT()", "SUM()", "NUMBER()", "TOTAL()"], "correct": 0, "tip": "COUNT() returns the number of rows that match a condition." },
      { "question": "What is the purpose of GROUP BY?", "options": ["Groups rows with same values", "Sorts rows ascending", "Filters rows", "Joins tables"], "correct": 0, "tip": "GROUP BY groups rows with same values for aggregate functions." },
      { "question": "Which constraint ensures unique values?", "options": ["UNIQUE", "PRIMARY KEY", "NOT NULL", "CHECK"], "correct": 0, "tip": "UNIQUE constraint ensures all values in a column are different." },
      { "question": "What does MAX() function return?", "options": ["The largest value", "Total number of values", "Average value", "Smallest value"], "correct": 0, "tip": "MAX() returns the highest value in a column." },
      { "question": "Which keyword is used to combine two or more SELECT statements?", "options": ["UNION", "JOIN", "MERGE", "COMBINE"], "correct": 0, "tip": "UNION combines results from multiple SELECT statements." },
      { "question": "What does the MIN() function do?", "options": ["Returns the smallest value", "Returns minimum length", "Returns first value", "Returns last value"], "correct": 0, "tip": "MIN() returns the lowest value in a column." },
      { "question": "Which clause is used with GROUP BY to filter groups?", "options": ["HAVING", "WHERE", "FILTER", "GROUP"], "correct": 0, "tip": "HAVING filters groups after GROUP BY, unlike WHERE which filters before." },
      { "question": "What does AVG() function calculate?", "options": ["Average value", "Total sum", "Count of values", "Maximum value"], "correct": 0, "tip": "AVG() calculates the arithmetic mean of numeric values." },
      { "question": "Which statement creates a new table?", "options": ["CREATE TABLE", "NEW TABLE", "MAKE TABLE", "BUILD TABLE"], "correct": 0, "tip": "CREATE TABLE defines a new table structure." },
      { "question": "What does the SUM() function do?", "options": ["Adds all values together", "Counts non-null values", "Finds maximum value", "Calculates average"], "correct": 0, "tip": "SUM() calculates the total of all numeric values." },
      { "question": "Which keyword removes duplicate rows?", "options": ["DISTINCT", "UNIQUE", "DIFFERENT", "SINGLE"], "correct": 0, "tip": "DISTINCT eliminates duplicate rows from query results." },
      { "question": "What is a PRIMARY KEY?", "options": ["Unique identifier for table rows", "First column in table", "Main table name", "Primary database"], "correct": 0, "tip": "PRIMARY KEY uniquely identifies each row in a table." },
      { "question": "Which command removes a table completely?", "options": ["DROP TABLE", "DELETE TABLE", "REMOVE TABLE", "CLEAR TABLE"], "correct": 0, "tip": "DROP TABLE removes the entire table structure and data." },
      { "question": "What does TRUNCATE do?", "options": ["Removes all rows but keeps table structure", "Deletes specific rows", "Drops the table", "Renames the table"], "correct": 0, "tip": "TRUNCATE quickly removes all data while preserving table structure." },
      { "question": "Which constraint prevents NULL values?", "options": ["NOT NULL", "NO NULL", "REQUIRED", "MANDATORY"], "correct": 0, "tip": "NOT NULL constraint ensures a column cannot have empty values." },
      { "question": "What is a FOREIGN KEY?", "options": ["Reference to another table's primary key", "Secondary table identifier", "External database link", "Backup key field"], "correct": 0, "tip": "FOREIGN KEY establishes relationships between tables." },
      { "question": "Which operator checks for NULL values?", "options": ["IS NULL", "= NULL", "== NULL", "NULL ="], "correct": 0, "tip": "IS NULL is the correct way to test for NULL values." },
      { "question": "What does ALTER TABLE do?", "options": ["Modifies table structure", "Changes table data", "Renames database", "Alters column values"], "correct": 0, "tip": "ALTER TABLE modifies existing table structure like adding columns." },
      { "question": "Which clause limits the number of returned rows?", "options": ["LIMIT", "TOP", "FIRST", "ROWS"], "correct": 0, "tip": "LIMIT restricts the number of rows returned in most databases." },
      { "question": "What is an INDEX?", "options": ["Structure to speed up queries", "Table identifier", "Column header", "Database name"], "correct": 0, "tip": "INDEX improves query performance by creating fast lookup paths." },
      { "question": "Which operator is used for ranges?", "options": ["BETWEEN", "RANGE", "FROM", "SPAN"], "correct": 0, "tip": "BETWEEN checks if a value falls within a specified range." },
      { "question": "What does COMMIT do?", "options": ["Saves transaction changes permanently", "Cancels current transaction", "Starts new transaction", "Backs up data"], "correct": 0, "tip": "COMMIT makes transaction changes permanent in the database." },
      { "question": "Which command undoes changes?", "options": ["ROLLBACK", "UNDO", "CANCEL", "REVERT"], "correct": 0, "tip": "ROLLBACK cancels changes made in the current transaction." },
      { "question": "What is a VIEW?", "options": ["Virtual table based on query", "Physical table copy", "Table backup", "Database schema"], "correct": 0, "tip": "VIEW is a virtual table created from a stored query." },
      { "question": "Which function returns current date?", "options": ["NOW()", "TODAY()", "DATE()", "CURRENT()"], "correct": 0, "tip": "NOW() returns the current date and time in most databases." },
      { "question": "What does LENGTH() function do?", "options": ["Returns string length", "Measures table size", "Counts rows", "Calculates distance"], "correct": 0, "tip": "LENGTH() returns the number of characters in a string." },
      { "question": "Which operator performs pattern matching with wildcards?", "options": ["LIKE", "MATCH", "SEARCH", "FIND"], "correct": 0, "tip": "LIKE uses wildcards % and _ for pattern matching." },
      { "question": "What does UPPER() function do?", "options": ["Converts to uppercase", "Moves data up", "Increases values", "Tops the list"], "correct": 0, "tip": "UPPER() converts all characters in a string to uppercase." },
      { "question": "Which function converts to lowercase?", "options": ["LOWER()", "DOWN()", "SMALL()", "MINI()"], "correct": 0, "tip": "LOWER() converts all characters in a string to lowercase." },
      { "question": "What is a TRIGGER?", "options": ["Code that runs automatically on events", "Manual database command", "Table constraint", "User permission"], "correct": 0, "tip": "TRIGGER is code that executes automatically when certain database events occur." },
      { "question": "Which statement grants permissions?", "options": ["GRANT", "ALLOW", "PERMIT", "ENABLE"], "correct": 0, "tip": "GRANT gives specific permissions to users or roles." },
      { "question": "What does REVOKE do?", "options": ["Removes permissions", "Cancels queries", "Deletes users", "Stops processes"], "correct": 0, "tip": "REVOKE removes previously granted permissions from users." },
      { "question": "Which function extracts part of a string?", "options": ["SUBSTRING()", "PART()", "PIECE()", "SECTION()"], "correct": 0, "tip": "SUBSTRING() extracts a portion of a string based on position." },
      { "question": "What does TRIM() function do?", "options": ["Removes leading/trailing spaces", "Cuts string length", "Deletes characters", "Formats text"], "correct": 0, "tip": "TRIM() removes whitespace from the beginning and end of strings." },
      { "question": "Which operator checks multiple values?", "options": ["IN", "WITHIN", "AMONG", "INSIDE"], "correct": 0, "tip": "IN operator checks if a value matches any value in a list." },
      { "question": "What is CONCAT() used for?", "options": ["Joining strings together", "Connecting tables", "Combining queries", "Linking databases"], "correct": 0, "tip": "CONCAT() combines multiple strings into one string." },
      { "question": "Which function rounds numbers?", "options": ["ROUND()", "CIRCLE()", "CURVE()", "BEND()"], "correct": 0, "tip": "ROUND() rounds numeric values to specified decimal places." },
      { "question": "What does CASE statement do?", "options": ["Provides conditional logic", "Creates database cases", "Handles errors", "Manages sessions"], "correct": 0, "tip": "CASE provides if-then-else logic within SQL queries." },
      { "question": "Which clause specifies table joins?", "options": ["JOIN", "CONNECT", "LINK", "MERGE"], "correct": 0, "tip": "JOIN clause combines rows from multiple tables based on relationships." },
      { "question": "What is CROSS JOIN?", "options": ["Cartesian product of two tables", "Intersection of tables", "Union of tables", "Difference of tables"], "correct": 0, "tip": "CROSS JOIN returns all possible combinations of rows from joined tables." },
      { "question": "Which function gets absolute value?", "options": ["ABS()", "ABSOLUTE()", "POSITIVE()", "PLUS()"], "correct": 0, "tip": "ABS() returns the absolute (positive) value of a number." },
      { "question": "What does COALESCE() do?", "options": ["Returns first non-NULL value", "Combines columns", "Merges tables", "Joins strings"], "correct": 0, "tip": "COALESCE() returns the first non-NULL value from a list of expressions." },
      { "question": "Which keyword creates temporary results?", "options": ["WITH", "TEMP", "TEMPORARY", "INTERIM"], "correct": 0, "tip": "WITH clause creates temporary named result sets (CTEs)." },
      { "question": "What is a STORED PROCEDURE?", "options": ["Precompiled SQL code block", "Temporary table", "Database backup", "User account"], "correct": 0, "tip": "STORED PROCEDURE is a saved collection of SQL statements that can be executed." },
      { "question": "Which function returns record count?", "options": ["COUNT(*)", "RECORDS()", "ROWS()", "NUMBER()"], "correct": 0, "tip": "COUNT(*) returns the total number of rows in a result set." },
      { "question": "What does EXISTS operator do?", "options": ["Tests for subquery results", "Checks table existence", "Verifies columns", "Confirms data"], "correct": 0, "tip": "EXISTS returns true if a subquery returns any rows." },
      { "question": "Which statement starts a transaction?", "options": ["BEGIN", "START", "OPEN", "INIT"], "correct": 0, "tip": "BEGIN starts a new database transaction." },
      { "question": "What is AUTO_INCREMENT?", "options": ["Automatically generates sequential numbers", "Increases table size", "Auto-updates data", "Increments all values"], "correct": 0, "tip": "AUTO_INCREMENT automatically generates unique sequential numbers for new rows." },
      { "question": "Which constraint ensures value validity?", "options": ["CHECK", "VALID", "VERIFY", "CONFIRM"], "correct": 0, "tip": "CHECK constraint ensures column values meet specified conditions." },
      { "question": "What does EXPLAIN do?", "options": ["Shows query execution plan", "Describes table structure", "Explains errors", "Documents code"], "correct": 0, "tip": "EXPLAIN displays how the database engine will execute a query." },
      { "question": "Which function returns current user?", "options": ["USER()", "CURRENT_USER()", "WHO()", "ACTIVE()"], "correct": 0, "tip": "USER() returns the name of the currently connected user." },
      { "question": "What is a SCHEMA?", "options": ["Database structure definition", "Table template", "Data model", "Query pattern"], "correct": 0, "tip": "SCHEMA defines the structure and organization of a database." },
      { "question": "Which operator negates conditions?", "options": ["NOT", "NEGATE", "OPPOSITE", "REVERSE"], "correct": 0, "tip": "NOT operator reverses the logic of a condition." },
      { "question": "What does IFNULL() do?", "options": ["Returns alternative for NULL values", "Checks if value is null", "Creates null values", "Removes nulls"], "correct": 0, "tip": "IFNULL() returns a specified value when the expression is NULL." },
      { "question": "Which function extracts date parts?", "options": ["EXTRACT()", "DATEPART()", "GET_DATE()", "DATE_PIECE()"], "correct": 0, "tip": "EXTRACT() retrieves specific parts like year, month from dates." },
      { "question": "What is a CURSOR?", "options": ["Pointer to query result set", "Database pointer", "Table indicator", "Column marker"], "correct": 0, "tip": "CURSOR allows row-by-row processing of query results." },
      { "question": "Which statement creates an index?", "options": ["CREATE INDEX", "BUILD INDEX", "MAKE INDEX", "NEW INDEX"], "correct": 0, "tip": "CREATE INDEX builds a new index on table columns." },
      { "question": "What does FLOOR() function do?", "options": ["Rounds down to integer", "Creates table floor", "Finds minimum", "Levels data"], "correct": 0, "tip": "FLOOR() rounds a number down to the nearest integer." },
      { "question": "Which function rounds up?", "options": ["CEILING()", "ROOF()", "TOP()", "UPPER()"], "correct": 0, "tip": "CEILING() rounds a number up to the nearest integer." },
      { "question": "What is DEFAULT constraint?", "options": ["Provides default column value", "Creates default table", "Sets default user", "Defines default action"], "correct": 0, "tip": "DEFAULT constraint specifies a default value for a column when no value is provided." },
      { "question": "Which statement modifies column properties?", "options": ["ALTER COLUMN", "CHANGE COLUMN", "MODIFY COLUMN", "UPDATE COLUMN"], "correct": 0, "tip": "ALTER COLUMN changes the properties of an existing column." },
      { "question": "What does POWER() function calculate?", "options": ["Number raised to a power", "System power level", "Database performance", "Processing power"], "correct": 0, "tip": "POWER() calculates a number raised to a specified power (exponent)." },
      { "question": "Which function calculates square root?", "options": ["SQRT()", "SQUARE_ROOT()", "ROOT()", "RADICAL()"], "correct": 0, "tip": "SQRT() returns the square root of a number." },
      { "question": "What is a SEQUENCE?", "options": ["Generates sequential numbers", "Orders data", "Sequences queries", "Arranges tables"], "correct": 0, "tip": "SEQUENCE generates unique sequential numbers, often used for primary keys." },
      { "question": "Which keyword defines column constraints?", "options": ["CONSTRAINT", "RULE", "LIMIT", "CONTROL"], "correct": 0, "tip": "CONSTRAINT keyword defines rules that columns must follow." },
      { "question": "What does MOD() function return?", "options": ["Remainder of division", "Modified value", "Mode of data", "Modular result"], "correct": 0, "tip": "MOD() returns the remainder when one number is divided by another." },
      { "question": "Which statement renames a table?", "options": ["RENAME TABLE", "CHANGE TABLE", "ALTER TABLE RENAME", "MODIFY TABLE NAME"], "correct": 0, "tip": "RENAME TABLE changes the name of an existing table." },
      { "question": "What is DUAL table?", "options": ["Dummy table for calculations", "Double table structure", "Dual primary keys", "Two-column table"], "correct": 0, "tip": "DUAL is a special one-row table used for calculations and functions." },
      { "question": "Which function converts data types?", "options": ["CAST()", "CONVERT()", "CHANGE()", "TRANSFORM()"], "correct": 0, "tip": "CAST() converts a value from one data type to another." },
      { "question": "What does GREATEST() function do?", "options": ["Returns largest value from list", "Finds best record", "Gets maximum count", "Selects top row"], "correct": 0, "tip": "GREATEST() returns the largest value from a list of expressions." },
      { "question": "Which function returns smallest value from list?", "options": ["LEAST()", "SMALLEST()", "MINIMUM()", "LOWEST()"], "correct": 0, "tip": "LEAST() returns the smallest value from a list of expressions." },
      { "question": "What is SAVEPOINT?", "options": ["Checkpoint within transaction", "Database backup point", "Save location", "Data preservation"], "correct": 0, "tip": "SAVEPOINT creates a point within a transaction to which you can rollback." },
      { "question": "Which statement copies table structure?", "options": ["CREATE TABLE LIKE", "COPY TABLE", "DUPLICATE TABLE", "CLONE TABLE"], "correct": 0, "tip": "CREATE TABLE LIKE copies the structure of an existing table." },
      { "question": "What does SIGN() function return?", "options": ["Sign of number (-1, 0, 1)", "Signature of data", "Signal strength", "Assignment value"], "correct": 0, "tip": "SIGN() returns -1 for negative, 0 for zero, 1 for positive numbers." },
      { "question": "Which operator combines AND conditions?", "options": ["&&", "AND", "BOTH", "PLUS"], "correct": 1, "tip": "AND operator requires all conditions to be true." },
      { "question": "What does OR operator do?", "options": ["Returns true if any condition is true", "Orders results", "Organizes data", "Optional results"], "correct": 0, "tip": "OR operator returns true if at least one condition is true." },
      { "question": "Which function generates random numbers?", "options": ["RAND()", "RANDOM()", "RND()", "GENERATE()"], "correct": 0, "tip": "RAND() generates random decimal numbers between 0 and 1." },
      { "question": "What is a SYNONYM?", "options": ["Alternative name for database object", "Similar data type", "Duplicate table", "Related column"], "correct": 0, "tip": "SYNONYM provides an alternative name for tables, views, or other objects." },
      { "question": "Which command shows table structure?", "options": ["DESCRIBE", "SHOW", "DISPLAY", "INFO"], "correct": 0, "tip": "DESCRIBE displays the structure and columns of a table." },
      { "question": "What does REPLACE() function do?", "options": ["Substitutes text within strings", "Replaces entire table", "Changes table structure", "Updates all records"], "correct": 0, "tip": "REPLACE() substitutes all occurrences of a substring with another string." },
      { "question": "Which function returns string position?", "options": ["LOCATE()", "FIND()", "SEARCH()", "POSITION()"], "correct": 0, "tip": "LOCATE() returns the position of a substring within a string." },
      { "question": "What is a MATERIALIZED VIEW?", "options": ["Physical copy of view results", "Virtual view", "Temporary view", "System view"], "correct": 0, "tip": "MATERIALIZED VIEW stores query results physically for faster access." },
      { "question": "Which statement creates user accounts?", "options": ["CREATE USER", "ADD USER", "NEW USER", "MAKE USER"], "correct": 0, "tip": "CREATE USER creates new database user accounts." },
      { "question": "What does DROP USER do?", "options": ["Removes user account", "Drops user privileges", "Deletes user data", "Disconnects user"], "correct": 0, "tip": "DROP USER permanently removes a user account from the database." },
      { "question": "Which function formats dates?", "options": ["DATE_FORMAT()", "FORMAT_DATE()", "DATE_STYLE()", "STYLE_DATE()"], "correct": 0, "tip": "DATE_FORMAT() converts dates to specified string formats." },
      { "question": "What is UNION ALL?", "options": ["Combines results including duplicates", "Joins all tables", "Selects all columns", "Updates all records"], "correct": 0, "tip": "UNION ALL combines query results without removing duplicates." },
      { "question": "Which function adds time intervals?", "options": ["DATE_ADD()", "TIME_PLUS()", "ADD_TIME()", "INTERVAL_ADD()"], "correct": 0, "tip": "DATE_ADD() adds specified time intervals to dates." },
      { "question": "What does NULLIF() return?", "options": ["NULL if values are equal", "First non-null value", "Null values only", "Non-null values"], "correct": 0, "tip": "NULLIF() returns NULL if two expressions are equal, otherwise returns the first expression." }
    ],
    "medium": [
      { "question": "What type of join returns all records from both tables?", "options": ["FULL OUTER JOIN", "INNER JOIN", "LEFT JOIN", "CROSS JOIN"], "correct": 0, "tip": "FULL OUTER JOIN returns all records from both tables with NULLs where no match exists." },
      { "question": "Which window function assigns unique sequential integers?", "options": ["ROW_NUMBER()", "RANK()", "DENSE_RANK()", "NTILE()"], "correct": 0, "tip": "ROW_NUMBER() assigns unique sequential integers starting from 1." },
      { "question": "What is the purpose of foreign key constraint?", "options": ["Maintains referential integrity", "Ensures unique values", "Prevents NULL values", "Creates index automatically"], "correct": 0, "tip": "Foreign key ensures referential integrity between tables." },
      { "question": "Which isolation level prevents dirty reads but allows phantom reads?", "options": ["READ COMMITTED", "READ UNCOMMITTED", "REPEATABLE READ", "SERIALIZABLE"], "correct": 0, "tip": "READ COMMITTED prevents dirty reads but allows non-repeatable and phantom reads." },
      { "question": "What does COALESCE function do?", "options": ["Returns first non-NULL value", "Combines strings", "Counts non-NULL values", "Converts data types"], "correct": 0, "tip": "COALESCE returns the first non-NULL expression from a list." },
      { "question": "Which type of index is automatically created for primary keys?", "options": ["Clustered index", "Non-clustered index", "Unique index", "Composite index"], "correct": 0, "tip": "Primary keys automatically create clustered indexes in most databases." },
      { "question": "What is the difference between UNION and UNION ALL?", "options": ["UNION removes duplicates, UNION ALL keeps them", "UNION joins tables, UNION ALL merges", "No difference", "UNION is faster than UNION ALL"], "correct": 0, "tip": "UNION eliminates duplicates while UNION ALL preserves all rows." },
      { "question": "Which join returns rows only when match exists in both tables?", "options": ["INNER JOIN", "LEFT JOIN", "RIGHT JOIN", "FULL JOIN"], "correct": 0, "tip": "INNER JOIN returns only matching rows from both tables." },
      { "question": "What does the RANK() window function do?", "options": ["Assigns ranks with gaps for ties", "Assigns sequential ranks", "Counts occurrences", "Orders randomly"], "correct": 0, "tip": "RANK() assigns same rank to ties but leaves gaps in sequence." },
      { "question": "Which statement creates a view?", "options": ["CREATE VIEW", "MAKE VIEW", "BUILD VIEW", "NEW VIEW"], "correct": 0, "tip": "CREATE VIEW defines a virtual table based on a query." },
      { "question": "What is a correlated subquery?", "options": ["Subquery that references outer query columns", "Independent subquery", "Subquery with joins", "Nested subquery"], "correct": 0, "tip": "Correlated subquery depends on values from the outer query." },
      { "question": "Which function returns the current timestamp?", "options": ["CURRENT_TIMESTAMP", "NOW()", "GETDATE()", "SYSDATE"], "correct": 0, "tip": "CURRENT_TIMESTAMP is the standard SQL function for current date/time." },
      { "question": "What does DENSE_RANK() do differently from RANK()?", "options": ["No gaps in ranking sequence", "Includes dense data only", "Ranks in descending order", "Provides unique ranks"], "correct": 0, "tip": "DENSE_RANK() assigns consecutive ranks without gaps even with ties." },
      { "question": "Which clause is used to partition data in window functions?", "options": ["PARTITION BY", "GROUP BY", "DIVIDE BY", "SPLIT BY"], "correct": 0, "tip": "PARTITION BY divides result set into partitions for window functions." },
      { "question": "What is the purpose of CASE expression?", "options": ["Conditional logic in queries", "Exception handling", "Case-sensitive comparisons", "Switch statements"], "correct": 0, "tip": "CASE provides conditional logic similar to if-then-else statements." },
      { "question": "Which join returns all rows from left table?", "options": ["LEFT JOIN", "RIGHT JOIN", "INNER JOIN", "FULL JOIN"], "correct": 0, "tip": "LEFT JOIN returns all rows from left table plus matching rows from right." },
      { "question": "What does the LEAD() window function do?", "options": ["Accesses next row's value", "Leads the ranking", "First value in partition", "Maximum value ahead"], "correct": 0, "tip": "LEAD() accesses data from subsequent rows within the same result set." },
      { "question": "Which constraint can reference multiple columns?", "options": ["COMPOSITE PRIMARY KEY", "SINGLE FOREIGN KEY", "UNIQUE INDEX", "CHECK CONSTRAINT"], "correct": 0, "tip": "Composite primary key can include multiple columns for uniqueness." },
      { "question": "What is a self-join?", "options": ["Table joined with itself", "Automatic join", "Inner join only", "Recursive join"], "correct": 0, "tip": "Self-join joins a table with itself using aliases." },
      { "question": "Which function calculates running totals?", "options": ["SUM() OVER()", "CUMULATIVE_SUM()", "RUNNING_TOTAL()", "PROGRESSIVE_SUM()"], "correct": 0, "tip": "SUM() with OVER() clause creates running totals using window functions." },
      { "question": "What does the LAG() function return?", "options": ["Previous row's value", "Lagging performance", "Last value in group", "Delayed result"], "correct": 0, "tip": "LAG() accesses data from previous rows within the same result set." },
      { "question": "Which type of subquery returns multiple values?", "options": ["Correlated subquery", "Scalar subquery", "EXISTS subquery", "Table subquery"], "correct": 3, "tip": "Table subquery returns multiple rows and columns." },
      { "question": "What is the purpose of EXISTS operator?", "options": ["Tests if subquery returns any rows", "Checks table existence", "Verifies column existence", "Confirms data presence"], "correct": 0, "tip": "EXISTS returns true if the subquery returns at least one row." },
      { "question": "Which aggregate function ignores NULL values?", "options": ["All aggregate functions", "COUNT(*) only", "SUM() only", "None ignore NULLs"], "correct": 0, "tip": "Most aggregate functions automatically ignore NULL values." },
      { "question": "What does NTILE() window function do?", "options": ["Divides rows into specified number of groups", "Creates N tiles", "Numbers tiles", "Names tiles"], "correct": 0, "tip": "NTILE() distributes rows into a specified number of ranked groups." },
      { "question": "Which join type can be most expensive?", "options": ["CROSS JOIN", "INNER JOIN", "LEFT JOIN", "RIGHT JOIN"], "correct": 0, "tip": "CROSS JOIN creates Cartesian product, potentially very large result sets." },
      { "question": "What is a CTE (Common Table Expression)?", "options": ["Temporary named result set", "Permanent table", "View definition", "Stored procedure"], "correct": 0, "tip": "CTE is a temporary named result set that exists within a single statement." },
      { "question": "Which window function calculates percentiles?", "options": ["PERCENTILE_CONT()", "PERCENT_RANK()", "NTILE()", "CUME_DIST()"], "correct": 0, "tip": "PERCENTILE_CONT() calculates continuous percentiles." },
      { "question": "What does CUME_DIST() calculate?", "options": ["Cumulative distribution", "Cumulative distance", "Customer distribution", "Current distribution"], "correct": 0, "tip": "CUME_DIST() calculates cumulative distribution of values." },
      { "question": "Which is true about recursive CTEs?", "options": ["They reference themselves", "They never terminate", "They're always infinite", "They can't be used"], "correct": 0, "tip": "Recursive CTEs can reference themselves to process hierarchical data." },
